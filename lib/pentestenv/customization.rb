# -*- coding: utf-8 -*-

require File.expand_path('instance', File.dirname(__FILE__))
require File.expand_path('target', File.dirname(__FILE__))

class Pentestenv
  # Pentest-env Customizations
  class Customization
    def initialize(custom)
      @logger = Log4r::Logger.new('vagrant::pentest-env/customizations')
      @logger.info("Pentest-env customizations: #{custom}")
      @custom = custom
    end

    def targets(config)
      config_instances(config, 'targets')
    end

    def instances(config)
      config_instances(config)
    end

    def config_instances(config, type='instances')
      return unless @custom.key?(type)

      @custom[type].each do |i|
        if type == 'instances'
          instance = Pentestenv::Instance.new(config, i.chomp, @custom)
        else
          instance = Pentestenv::Target.new(config, i.chomp, @custom)
        end

        instance.register
        apply instance.name, config
      end
    end

    def apply(instance_name, config)
      @logger.info("[#{instance_name}] Applying customizations..")
      packages instance_name, config
      commands instance_name, config
      scripts instance_name, config
      synced_folders instance_name, config

      apply_chef instance_name, config
    end

    def packages(instance_name, config)
      packages = instance_customization(instance_name, 'packages')
      return unless packages

      config.vm.define instance_name do |i|
        @logger.info("[#{instance_name}] Setup packages: `#{packages.join(' ')}`")
        i.vm.provision :shell,
                          inline: 'apt-get update&&'\
                                  "apt-get -y install #{packages.join(' ')}"
      end
    end

    def commands(instance_name, config)
      commands = instance_customization(instance_name, 'commands')
      return unless commands

      config.vm.define instance_name do |i|
        commands.each do |command|
          @logger.info("[#{instance_name}] Setup provisioning inline script (command): `#{command}`")
          i.vm.provision :shell,
                         inline: command
        end
      end
    end

    def scripts(instance_name, config)
      scripts = instance_customization(instance_name, 'scripts')
      return unless scripts

      config.vm.define instance_name do |i|
        scripts.each do |script|
          path = script_path(script)
          next unless path
          @logger.info("[#{instance_name}] Setup provisioning shell script: `#{path}`")
          i.vm.provision :shell,
                         path: path
        end
      end
    end

    def synced_folders(instance_name, config)
      folders = instance_customization(instance_name, 'synced_folders')
      return unless folders

      config.vm.define instance_name do |i|
        folders.each do |host, guest|
          @logger.info("[#{instance_name}] Configure volume: `#{host}` => `#{guest}`")
          i.vm.synced_folder(host, guest)
        end
      end
    end

    def apply_chef(instance_name, config)
      if File.directory? "#{ENV['PWD']}/chef-repo/roles"
        chef_custom = instance_customization(instance_name, 'chef')
        return unless chef_custom

        chef_base_url = 'https://opscode-omnibus-packages.s3.amazonaws.com/debian/8/x86_64'
        chef_deb_file = 'chef_12.8.1-1_amd64.deb'

        config.vm.define instance_name do |i|
          i.vm.provision :shell,
                         inline: 'test -d /opt/chef ||'\
                                 "(wget #{chef_base_url}/#{chef_deb_file} -O #{chef_deb_file} && "\
                                 "dpkg -i #{chef_deb_file} && rm #{chef_deb_file})"

          i.vm.provision :chef_solo do |chef|
            chef.install = false
            chef.cookbooks_path = 'cookbooks/'
            chef.roles_path = 'chef-repo/roles'

            if chef_custom['recipes']
              chef_custom['recipes'].each do |recipe|
                @logger.info("[#{instance_name}][chef] Add recipe `#{recipe}`")
                chef.add_recipe(recipe)
              end
            end

            if chef_custom['roles']
              chef_custom['roles'].each do |role|
                @logger.info("[#{instance_name}][chef] Add role `#{role}`")
                chef.add_role(role)
              end
            end

            chef.json = chef_custom['json'] if chef_custom['json']
          end
        end
      end
    end

    private

    def script_path(script)
      script_path = false
      default_path = "#{ENV['PWD']}/scripts/#{script}"
      custom_path = "#{@custom['scripts_path']}/#{script}"
                    .gsub(/^~/, ENV['HOME'])

      if @custom.key?('scripts_path') \
         && ! @custom['scripts_path'].empty? && File.exist?(custom_path)
        script_path = custom_path
      elsif File.exist?(default_path)
        script_path = default_path
      end

      @logger.debug("Script path for `#{script}`: `#{script_path}`")
      script_path
    end

    def instance_customization(name, key)
      customizations = false
      if @custom.key?(name)\
         && @custom[name].key?(key)\
         && ! @custom[name][key].empty?
        customizations = @custom[name][key]
      end

      @logger.debug("[#{name}][#{key}] => #{customizations}`")
      customizations
    end
  end
end
