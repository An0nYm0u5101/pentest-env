# coding: utf-8
# This source file is part of pentest-env.
#
# pentest-env is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pentest-env is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with pentest-env. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.

require File.expand_path('target', File.dirname(__FILE__))

class Pentestenv
  # Pentest-env Customizations
  class Customization
    def initialize(custom)
      @custom = custom
    end

    def targets(config)
      return unless @custom.key?('targets')

      @custom['targets'].each do |t|
        target = Pentestenv::Target.new(config, t.chomp, @custom)
        target.register
        apply target.name, config
      end
    end

    def apply(instance_name, config)
      packages instance_name, config
      commands instance_name, config
      scripts instance_name, config
      synced_folders instance_name, config
    end

    def packages(instance_name, config)
      packages = instance_customization(instance_name.to_s, 'packages')
      return unless packages

      config.vm.provision :shell,
                          inline: 'apt-get update&&'\
                                  "apt-get -y install #{packages.join(' ')}"
    end

    def commands(instance_name, config)
      commands = instance_customization(instance_name.to_s, 'commands')
      return unless commands

      commands.each do |command|
        config.vm.provision :shell,
                            inline: command
      end
    end

    def scripts(instance_name, config)
      scripts = instance_customization(instance_name.to_s, 'scripts')
      return unless scripts

      scripts.each do |script|
        next unless script_path(script)
        config.vm.provision :shell,
                            path: script_path(script)
      end
    end

    def synced_folders(instance_name, config)
      folders = instance_customization(instance_name.to_s, 'synced_folders')
      return unless folders

      folders.each do |host, guest|
        config.vm.synced_folder(host, guest)
      end
    end

    def apply_chef(instance_name, chef_config)
      chef = instance_customization(instance_name.to_s, 'chef')
      return unless chef

      if chef['recipes']
        chef['recipes'].each do |recipe|
          chef_config.add_recipe(recipe)
        end
      end

      if chef['roles']
        chef['roles'].each do |role|
          chef_config.add_role(role)
        end
      end

      chef_config.json = chef['json'] if chef['json']
    end

    private

    def script_path(script)
      default_path = "#{ENV['PWD']}/scripts/#{script}"
      custom_path = "#{@custom['scripts_path']}/#{script}"
                    .gsub(/^~/, ENV['HOME'])

      if @custom.key?('scripts_path') \
         && ! @custom['scripts_path'].empty? && File.exist?(custom_path)
        return custom_path
      elsif File.exist?(default_path)
        return default_path
      end
      false
    end

    def instance_customization(name, key)
      if @custom.key?(name)\
         && @custom[name].key?(key)\
         && ! @custom[name][key].empty?
        return @custom[name][key]
      else
        false
      end
    end
  end
end
