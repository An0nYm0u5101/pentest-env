# coding: utf-8
# This source file is part of pentest-env.
#
# pentest-env is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pentest-env is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with pentest-env. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.

require File.expand_path('target', File.dirname(__FILE__))

class Pentestenv
  class Customization
    def initialize custom
      @custom = custom
      puts "Customizations loaded: #{@custom}"
    end

    def targets config
      if @custom.key?('targets')
        @custom['targets'].each do |t|
          target = Pentestenv::Target.new(config, t.chomp, @custom)
          puts "Registering `#{target.name}` target.."
          target.register
        end
      end
    end

    def apply instance_name, config
      packages instance_name, config
      commands instance_name, config
      scripts instance_name, config
      synced_folders instance_name, config
    end

    def packages instance_name, config
      name = instance_name.to_s
      if @custom.key?(name) \
         && @custom[name].key?('packages') \
         && ! @custom[name]['packages'].empty?
        packages = @custom[name]['packages'].join(' ')
        puts "Install apt packages: [#{packages}]"
        config.vm.provision :shell,
                            :inline => "apt-get update; apt-get -y install #{packages}"
      end
    end

    def commands instance_name, config
      name = instance_name.to_s
      if @custom.key?(name) \
         && @custom[name].key?('commands') \
         && ! @custom[name]['commands'].empty?
        @custom[name]['commands'].each do |command|
          puts "Run command: `#{command}`"
          config.vm.provision :shell,
                              inline: command
        end
      end
    end

    def scripts instance_name, config
      name = instance_name.to_s
      if @custom.key?(name) \
         && @custom[name].key?('scripts') \
         && ! @custom[name]['scripts'].empty?
        @custom[name]['scripts'].each do |script|
          path = script_path(script)
          if path
            puts "Run script: `#{path}`"
            config.vm.provision :shell,
                                :path => path
          else
            puts "Script `#{script}` not found.. skipped!"
          end
        end
      end
    end

    def synced_folders instance_name, config
      name = instance_name.to_s
      if @custom.key?(name) \
         && @custom[name].key?('synced_folders') \
         && ! @custom[name]['synced_folders'].empty?
        @custom[name]['synced_folders'].each do |host, guest|
          puts "Sync folder `#{host}` => `#{guest}`"
          config.vm.synced_folder(host, guest)
        end
      end
    end

    private

    def script_path script
      default_path = "#{ENV['PWD']}/scripts/#{script}"
      if @custom.key?('scripts_path') \
         && ! @custom['scripts_path'].empty? \
         && File.exists?("#{@custom['scripts_path']}/#{script}")
        return "#{@custom['scripts_path']}/#{script}"
      elsif File.exists?(default_path)
        return default_path
      end
      false
    end
  end
end
