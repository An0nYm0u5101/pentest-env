# This source file is part of pentest-env.
#
# pentest-env is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# pentest-env is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with pentest-env. If not, see <http://www.gnu.org/licenses/gpl-3.0.html>.

require File.expand_path('target', File.dirname(__FILE__))

class Pentestenv
  class Customization
    def initialize(custom)
      @custom = custom
      puts "Customizations loaded: #{@custom}"
    end

    def targets config
      if @custom.key?('targets')
        @custom['targets'].each do |t|
          target = Pentestenv::Target.new(config, t.chomp)
          puts "Registering `#{target.name}` target.."
          target.register
        end
      end
    end

    def packages instance_name, config
      name = instance_name.to_s
      if @custom.key?(name) \
        && @custom[name].key?('packages') \
        && ! @custom[name]['packages'].empty?
        packages = @custom[name]['packages'].join(' ')
        config.vm.provision :shell,
                            :inline => "apt-get update; apt-get -y install #{packages}"
      end
    end

    def synced_folders instance_name, config
      if File.exists?("#{@path}/synced_folders")
        folders = eval(File.open("#{@path}/synced_folders").read)
        folders.each do | host, guest |
          config.vm.synced_folder(host, guest)
        end
      end
    end

    def scripts instance_name, config
      if Dir.exists?("#{@path}/scripts/")
        Dir.glob("#{@path}/scripts/*") do | script |
          if ["file", "link"].include?(File.ftype(script))
            config.vm.provision :shell,
            :path => script
          end
        end
      end
    end
  end
end
