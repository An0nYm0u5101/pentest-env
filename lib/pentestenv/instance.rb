# -*- coding: utf-8 -*-

class Pentestenv
  # Pentest-env Instance
  class Instance
    attr_reader :name

    def initialize(vagrant_config, instance_name, customization = {})
      @logger = Log4r::Logger.new('vagrant::pentest-env/instance')
      @logger.info("Initializing instance `#{instance_name}`")
      @custom = customization
      @config = vagrant_config
      @name = instance_name
      @instance = instance_path(instance_name)
      fail ArgumentError,
           "Specified instance `#{@name}` is not available." unless @instance
    end

    def register
      @logger.info("Registering instance `#{@name}`")
      require @instance
      instance @config
    end

    private

    def instance_path(instance)
      instance_path = false
      default_path = "#{ENV['PWD']}/instances/#{instance}"
      custom_path = "#{@custom['instances_path']}/#{instance}"
                    .gsub(/^~/, ENV['HOME'])

      if @custom.key?('instances_path') \
         && ! @custom['instances_path'].empty? && File.exist?("#{custom_path}.rb")
        instance_path =  custom_path
      elsif File.exist?("#{default_path}.rb")
        instance_path = default_path
      end

      @logger.debug("Instance path is `#{instance_path}`")
      instance_path
    end
  end
end
