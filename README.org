* Pentest Environment Deployer

This repo provides an easy way to deploy a clean pentesting environment with Kali linux using vagrant and virtualbox.

** Requirements
I assume you are familiar with virtualbox and vagrant.
- https://www.virtualbox.org/
- http://www.vagrantup.com/

Latest ~pentest-env~ release is tested with:
- Virtualbox (5.0.14)
- Vagrant (1.8.1)

** Current box
*** Kali 2016.1
- http://box.hackbbs.org/kali-2016.1.1-netfix.box
SHA256: c652a76feca465f872c49442d780d332ec10aba3047950d8a3de95183ec8af6c

See the [[docs/About-boxes.md][documentation]] page about boxes for more details.

** Getting started
To get started with ~pentest-env~, clone this repository and run ~vagrant up~ inside the directory.
This will download and run the Kali instance.

You can customize, add targets, create new targets etc.. inside ~pentest-env~.
Some examples are available in the ~examples/~ directory, to use one simply set the ~PENTESTRC~ environment variable:
#+BEGIN_SRC
> PENTESTRC=examples/ctf.pentestrc vagrant status
Current machine states:

kali                      running (virtualbox)
metasploitable            not created (virtualbox)
primer                    not created (virtualbox)

This environment represents multiple VMs. The VMs are all listed
above with their current state. For more information about a specific
VM, run `vagrant status NAME`.
#+END_SRC

For more details, visit the [[docs/][documentation]] pages:
1. [[docs/Installation.md][Installation]]
2. [[docs/Usage.md][Usage]]
3. [[docs/Docker.md][Docker]]
4. [[docs/Openstack.md][Openstack]]
5. [[docs/Customizations.md][Customizations]]
6. [[docs/Instances.md][Instances]]
7. [[docs/Targets.md][Targets]]
8. [[docs/Custom-instances.md][Write custom instances and targets]]
9. [[docs/Debugging.md][Debugging]]
10. [[docs/About-boxes.md][About boxes]]
11. [[docs/Known-issues.md][Known issues]]

** About Security
**** verify checksums
It's recommended to check downloaded box files with provided checksums (SHA256): http://box.hackbbs.org/checksums.txt
**** sshd is running
Provided boxes run the ~sshd~ service.
So if you plan to run the Kali linux with a Bridged interface, default setup can be dangerous!

- ~root~ password of kali is ~toor~.
- SSH private key is not private! Anyone can use this [[https://github.com/Sliim/pentest-env/blob/master/ssh-keys/pentest-env][key]] to connect to your instance.
- The Kali linux 1.0 box added a ~vagrant~ user with password ~tnargav~ and is in sudoers with no password required.

** License
   See COPYING file
